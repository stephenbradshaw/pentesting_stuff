# burp extension to save page response content from the site map via a right click

#burp imports
from burp import IBurpExtender
from burp import IContextMenuFactory

#Java imports
from javax.swing import JMenuItem
from java.util import List,ArrayList
from java.net import URL

#python imports
import threading
import os
from binascii import hexlify

# basedir in which to save responses
baseDir = '/tmp/'


class BurpExtender(IBurpExtender,IContextMenuFactory):
    def registerExtenderCallbacks(self,callbacks):
        self.callbacks = callbacks
        self.helpers = callbacks.getHelpers()
        self.callbacks.setExtensionName("Item response saver")
        self.callbacks.registerContextMenuFactory(self)
        self._createIfNotExist(baseDir)
        return

    def createMenuItems(self, IContextMenuInvocation):
        self.selectedRequest = IContextMenuInvocation.getSelectedMessages()
        menuItemList = ArrayList()
        menuItemList.add(JMenuItem("Save responses", actionPerformed = self.onClick))
        return menuItemList

    def _createIfNotExist(self, dir):
        if not os.path.isdir(dir):
            os.mkdir(dir)


    def download(self, requests):
        for request in requests:
            srv_a = self.helpers.analyzeRequest(request)
            this_url = srv_a.getUrl().toString().split(":")[0] + ":" + srv_a.getUrl().toString().split(":")[1] + "/" + srv_a.getUrl().toString().split(":")[2].split("/",1)[1]
            sm = self.callbacks.getSiteMap(this_url)
            for sme in sm:
                srv_b = self.helpers.analyzeRequest(sme)
                entry_url = srv_b.getUrl().toString().split(":")[0] + ":" + srv_b.getUrl().toString().split(":")[1] + "/" + srv_b.getUrl().toString().split(":")[2].split("/",1)[1]
                if this_url == entry_url:
                    
                    rd = sme.getResponse()
                    if rd:
                        ar = self.helpers.analyzeResponse(rd)
                        bo = ar.getBodyOffset()
                        r = self.helpers.bytesToString(rd)[bo:]
                        if len(r) > 2 and ar.statusCode == 200:
                            bits = [a for a in ("/" + srv_b.getUrl().toString().split(":")[2].split("/",1   )[1].split('?')[0]).split('/') if a]
                            od = baseDir
                            for di in bits[:-1]:
                                od = os.path.join(od, di)
                                self._createIfNotExist(od)

                            open(baseDir + '/'.join(bits), 'wb').write(r.encode('utf-8'))

                            break


    def onClick(self, event):
        if len(self.selectedRequest) == 1:
            srv = self.helpers.analyzeRequest(self.selectedRequest[0])
            base_url = srv.getUrl().toString().split(":")[0] + ":" + srv.getUrl().toString().split(":")[1] + "/" + srv.getUrl().toString().split(":")[2].split("/",1)[1]
            requests = self.callbacks.getSiteMap(base_url)
        else:
            requests = self.selectedRequest

        t = threading.Thread(target=self.download,args=[requests])
        t.daemon = True
        t.start()


