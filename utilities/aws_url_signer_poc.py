#!/usr/bin/env python
import sys, os, datetime, hashlib, hmac, urllib.parse
import requests


# see here for API documentation for uncovered services: https://docs.aws.amazon.com/index.html


# implements sigv4
# See: http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html

class AWSApiUrlGenerator:

    def __init__(self, access_key, secret_key, session_token=None, link_expiry=180, debug=False):
        self.access_key = access_key
        self.secret_key = secret_key
        self.session_token = session_token
        self.link_expiry = link_expiry
        # set region_bound if <service>.amazonaws.com for service will not work for us-east-1
        # canonical_token if the session token is used in signature calculation
        # default_version is the mandatory API version string for the service
        self.service_info = {
            'dynamodb' : {'default_version' : '2011-12-05','canonical_token' : True}, # untested
            'ec2': {'default_version' : '2013-10-15', 'canonical_token' : True},
            'iam': {'default_version' : '2010-05-08', 'canonical_token' : True},
            's3' : {'default_version' : '2006-03-01', 'canonical_token' : True},
            'ssm': {'default_version' : '2014-11-06', 'canonical_token' : True, 'region_bound': True},
            'sts': {'default_version' : '2011-06-15', 'canonical_token' : True}
        }
        self.debug = debug


    def get_host_for_region(self, service, region):
        if service in self.service_info and self.service_info[service].get('region_bound'):
            return '{}.{}.amazonaws.com'.format(service, region)
        else:
            return '{}.amazonaws.com'.format(service) if region == 'us-east-1' else '{}.{}.amazonaws.com'.format(service, region)


    # Key derivation functions. See:
    # http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python
    def sign(self, key, msg):
        return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()

    def get_signature_key(self, key, dateStamp, regionName, serviceName):
        kDate = self.sign(('AWS4' + key).encode('utf-8'), dateStamp)
        kRegion = self.sign(kDate, regionName)
        kService = self.sign(kRegion, serviceName)
        kSigning = self.sign(kService, 'aws4_request')
        return kSigning


    #When you add the X-Amz-Security-Token parameter to the query string, some services require that you include this parameter in the canonical (signed) request.
    # For other services, you add this parameter at the end, after you calculate the signature. For details, see the API reference documentation for that service.
    def create_aws_api_url(self, service, parameters, host, region, endpoint, canonical_token=True):
        t = datetime.datetime.utcnow()
        amz_date = t.strftime('%Y%m%dT%H%M%SZ') # Format date as YYYYMMDD'T'HHMMSS'Z'
        datestamp = t.strftime('%Y%m%d') # Date w/o time, used in credential scope
        algorithm = 'AWS4-HMAC-SHA256'
        credential_scope = datestamp + '/' + region + '/' + service + '/' + 'aws4_request'
        params = {
            'X-Amz-Algorithm': algorithm,
            'X-Amz-Credential': urllib.parse.quote_plus(self.access_key + '/' + credential_scope),
            'X-Amz-Date' : amz_date,
            'X-Amz-Expires' : self.link_expiry,
            'X-Amz-SignedHeaders': 'host'
        }

        if self.session_token and canonical_token:
            params['X-Amz-Security-Token'] = urllib.parse.quote_plus(self.session_token)

        qp = {**parameters, **params}
        canonical_querystring = '&'.join(['{}={}'.format(a, qp[a]) for a in sorted(qp.keys())])

        if service != 's3':
            payload_hash = hashlib.sha256(('').encode('utf-8')).hexdigest()
        else:
            payload_hash = 'UNSIGNED-PAYLOAD' # yudodis - s3 special for some reason

        canonical_request = 'GET\n{}\n{}\nhost:{}\n\nhost\n{}'.format('/', canonical_querystring, host, payload_hash)
        string_to_sign = '\n'.join([algorithm, amz_date, credential_scope, hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()])

        if self.debug: # should probably send this to a logger...
            sep = '======='
            print('{}\nCanonical Request:\n{}\n{}'.format(sep, canonical_request, sep))
            print('{}\nDigest: {}\n{}'.format(sep, hashlib.sha256(canonical_request.encode('utf-8')).hexdigest(), sep))
            print('{}\nString to sign: \n{}\n{}'.format(sep, string_to_sign, sep))

        signing_key = self.get_signature_key(self.secret_key, datestamp, region, service)
        signature = hmac.new(signing_key, (string_to_sign).encode("utf-8"), hashlib.sha256).hexdigest()
        canonical_querystring += '&X-Amz-Signature=' + signature

        if self.session_token and not canonical_token:
            canonical_querystring += '&X-Amz-Security-Token=' + urllib.parse.quote_plus(self.session_token)

        #return endpoint + "?" + canonical_querystring
        return endpoint + "/?" + canonical_querystring


    def create_service_url(self, service, action, parameters={}, region='us-east-1', version=None, canonical_token=None):
        host = self.get_host_for_region(service, region)
        version = version if version else self.service_info[service].get('default_version') if service in self.service_info else None
        if not version:
            raise Exception('A default version for service type "{}" was not found, please provide a version stamp'.format(service))
        if not isinstance(canonical_token, type(None)):
            canonical_token = canonical_token
        elif service in self.service_info and 'canonical_token' in self.service_info[service]:
            canonical_token = self.service_info[service]['canonical_token']
        else:
            raise Exception('No information was found as to whether service "{}" uses canonical tokens, please specify'.format(service))
        default_params = {'Action': action, 'Version': version}
        return self.create_aws_api_url(service, {**default_params, **parameters} , host, region, 'https://{}'.format(host), canonical_token)




access_key = os.environ.get('AWS_ACCESS_KEY_ID')
secret_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
session_token = os.environ.get('AWS_SESSION_TOKEN')
if access_key is None or secret_key is None:
    print('No access key is available.')
    sys.exit()



api = AWSApiUrlGenerator(access_key, secret_key, session_token, debug=True)

#request_url = api.create_service_url('iam', 'ListUsers')
#request_url = api.create_service_url('ec2', 'DescribeRegions')
#request_url = api.create_service_url('ec2', 'DescribeInstances', parameters = {'MaxResults': '5'}, region='ap-southeast-2')
#request_url = api.create_service_url('sts', 'GetCallerIdentity')
#request_url = api.create_service_url('ssm', 'DescribeInstanceInformation')
#request_url = api.create_service_url('ssm', 'DescribeInstanceInformation', region='ap-southeast-2')
request_url = api.create_service_url('s3', 'ListBuckets')

#DescribeInstanceInformation
#print(request_url)

from xml.sax.saxutils import escape

#print('\nBEGIN REQUEST++++++++++++++++++++++++++++++++++++')
#print('Request URL = ' + request_url)

#print(request_url + '\n\n')
#print(escape(request_url))
print('<!ENTITY % file SYSTEM "{}">'.format(request_url))

#r = requests.get(request_url)

#print('\nRESPONSE++++++++++++++++++++++++++++++++++++')
#print('Response code: %d\n' % r.status_code)
#print(r.text)
#open('/tmp/1', 'w').write(r.text
