// lists controllers when added to a web application
// returns result as a string
public String getControllers()
{
  var asms = AppDomain.CurrentDomain.GetAssemblies().Where(a => a.GetName().Name != "System.Web.Mvc");
  String output = "";
  foreach (Assembly asm in asms)
  {
    String s = "";
    try
    {
      var controllers = asm.GetExportedTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t));
      if (controllers.Count() > 0)
      {
        s += string.Format("\r\n{0}\r\nAssembly: {1}\r\n{2}\r\n", new String('=',32), asm.GetName().Name, new String('=', 32));
      }
      foreach (Type controller in controllers)
      {
        s += string.Format("{0}\r\nController: {1}\r\n{2}\r\n", new String('-', 32), controller.Name, new String('-', 32));
        List<string> bannedDeclaringTypes = new List<string> { "System.Object", "System.Web.Mvc.ControllerBase", "System.Web.Mvc.Controller" };
        //List<string> bannedDeclaringTypes = new List<string> { };
        String cattribs = "Controller Attributes: ";
        var cattributes = controller.GetCustomAttributes(false);
        foreach (var attribute in cattributes)
        {
          cattribs += string.Format("{0},", attribute);
        }
        s += string.Format("{0}\r\n", cattribs);
        var methods = controller.GetMethods().Where(m => m.IsPublic && !bannedDeclaringTypes.Contains(m.DeclaringType.FullName));
        foreach (var method in methods)
        {
          s += string.Format("Method: {0}\r\n", method.Name);

          String attribs = "Method Attributes: ";
          var attributes = method.GetCustomAttributes(false);
          foreach (var attribute in attributes)
          {
            attribs += string.Format("{0},", attribute);
          }
          s += string.Format("{0}\r\n", attribs);

          var parameters = method.GetParameters();
          String pdata = "Method Parameters: ";
          foreach (var param in parameters)
          {
            pdata += string.Format("(Name: {0}, Type: {1}),", param.Name, param.ParameterType.Name);
          }
          s += string.Format("{0}\r\n", pdata);

          s += string.Format("Method Return Type: {0}\r\n\r\n", method.ReturnType.Name);
        }
      }
    }
    catch
    {
      s += string.Format("\r\nAssembly {0} failed parsing\r\n", asm.GetName().Name);
    }
    output += s;
  }
  return output;
}
